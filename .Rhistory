(1/analysis_outputs_sas$B[1])
(1/analysis_outputs_sss$B[2]) / (1/analysis_outputs_sss$B[2])
(1/analysis_outputs_sss$B[2]) / (1/analysis_outputs_sss$B[1])
(plt_sas <-
# irmass::plot_srrt_vs_ssd_grp(df = plot_inputs_sas) +
irmass::plot_srrt_vs_ssd_grp(df = analysis_inputs_sas) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 1,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 1,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 1,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sas$B[2]) /
(1/analysis_outputs_sas$B[1]) /
),
(plt_sas <-
# irmass::plot_srrt_vs_ssd_grp(df = plot_inputs_sas) +
irmass::plot_srrt_vs_ssd_grp(df = analysis_inputs_sas) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 1,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 1,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 1,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sas$B[2]) /
(1/analysis_outputs_sas$B[1]))),
parse = TRUE
)
)
(plt_sas <-
# irmass::plot_srrt_vs_ssd_grp(df = plot_inputs_sas) +
irmass::plot_srrt_vs_ssd_grp(df = analysis_inputs_sas) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 0.5,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sas$B[2]) /
(1/analysis_outputs_sas$B[1]))),
parse = TRUE
)
)
(plt_sss <-
irmass::plot_srrt_vs_ssd_grp(plot_inputs_sss) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sss$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sss$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 0.5,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sss$B[2]) /
(1/analysis_outputs_sss$B[1]))),
parse = TRUE
)
)
"%>%" <- magrittr::`%>%`
project_dir <- rprojroot::find_root(rprojroot::has_file("DESCRIPTION"))
derivatives_dir <- file.path(project_dir,"data","derivatives")
figures_dir <- file.path(project_dir,"data","reports","figures")
notebook_name <- "group_analysis_effect_ssd_on_stoprespond_rt"
irmass::verify_output_dirs(base_dirs = list(derivatives_dir, figures_dir),
notebook_name = notebook_name)
cleaned_trial_level_data_sas <-
readr::read_csv(file.path(derivatives_dir,
'individual_analysis_effect_ssd_on_stoprespond_rt',
paste('analysis_inputs',
'individual_analysis_effect_ssd_on_stoprespond_rt',
'action_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_types = readr::cols(subjectIx = readr::col_integer(),
trial_alt = readr::col_character(),
t_d_alt = readr::col_character(),
RT_trial = readr::col_double(),
RT_trial_inv = readr::col_double()
)
)
cleaned_trial_level_data_sss <-
readr::read_csv(file.path(derivatives_dir,
'individual_analysis_effect_ssd_on_stoprespond_rt',
paste('analysis_inputs',
'individual_analysis_effect_ssd_on_stoprespond_rt',
'stimulus_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_types = readr::cols(subjectIx = readr::col_integer(),
trial_alt = readr::col_character(),
t_d_alt = readr::col_character(),
RT_trial = readr::col_double(),
RT_trial_inv = readr::col_double()
)
)
(summary_stats <-
dplyr::bind_rows(cleaned_trial_level_data_sas, cleaned_trial_level_data_sss) %>%
dplyr::mutate(subjectIx = factor(subjectIx),
trial_alt = factor(trial_alt, levels = c('SAS', 'SSS')),
t_d_alt = factor(t_d_alt, levels = c('short','intermediate', 'long'), ordered = TRUE),
) %>%
# Compute mean responses times for each subject and trial type
dplyr::group_by(subjectIx, trial_alt, t_d_alt) %>%
dplyr::summarize(mean_RT = mean(RT_trial)) %>%
dplyr::ungroup() %>%
# Identify outliers
irmass::identify_outlying_values(df = .,
group_vars = c('trial_alt', 't_d_alt'),
dep_var = 'mean_RT',
z_threshold = 2.5)
)
# Outliers in SAS trial data
outliers_sas <-
summary_stats %>%
dplyr::filter(trial_alt == 'SAS') %>%
dplyr::select(subjectIx, t_d_alt, is_outlier) %>%
tidyr::spread(key = t_d_alt, value = is_outlier) %>%
dplyr::filter(short | intermediate | long) %>%
dplyr::pull(subjectIx) %>%
as.double()
# Outliers in SSS trial data
outliers_sss <-
summary_stats %>%
dplyr::filter(trial_alt == 'SSS') %>%
dplyr::select(subjectIx, t_d_alt, is_outlier) %>%
tidyr::spread(key = t_d_alt, value = is_outlier) %>%
dplyr::filter(short | intermediate | long) %>%
dplyr::pull(subjectIx) %>%
as.double()
(plot_inputs_sas <-
summary_stats %>%
dplyr::filter(trial_alt == 'SAS') %>%
dplyr::select(subjectIx, t_d_alt, mean_RT, is_outlier)
)
(plot_inputs_sss <-
summary_stats %>%
dplyr::filter(trial_alt == 'SSS') %>%
dplyr::select(subjectIx, t_d_alt, mean_RT, is_outlier)
)
(analysis_inputs_sas <-
plot_inputs_sas %>%
dplyr::filter(!(subjectIx %in% outliers_sas)) %>%
dplyr::select(-is_outlier)
)
(analysis_inputs_sss <-
plot_inputs_sss %>%
dplyr::filter(!(subjectIx %in% outliers_sss)) %>%
dplyr::select(-is_outlier)
)
(analysis_outputs_sas <-
irmass::test_effect_ssd_on_srrt_grp(analysis_inputs_sas)
)
(analysis_outputs_sss <-
irmass::test_effect_ssd_on_srrt_grp(analysis_inputs_sss)
)
(plt_sas <-
# irmass::plot_srrt_vs_ssd_grp(df = plot_inputs_sas) +
irmass::plot_srrt_vs_ssd_grp(df = analysis_inputs_sas) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sas$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 0.5,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sas$B[2]) /
(1/analysis_outputs_sas$B[1]))),
parse = TRUE
)
)
plt_sas_title <- ''
plt_description <- 'Each data point is a  participant. The diagnonal dashed line indicates mean stop-respond RT = mean no-signal RT. The vertical dotted line indicates the no-signal RT criterion (i.e. maximum mean RT allowed).'
(plt_sss <-
irmass::plot_srrt_vs_ssd_grp(plot_inputs_sss) +
ggplot2::annotate("text",
x = 1,
y = 0.9,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0f'] == %s", irmass::fancy_scientific(analysis_outputs_sss$B[1])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.85,
hjust = 0,
vjust = 0.5,
label = sprintf("B['0r'] == %s", irmass::fancy_scientific(analysis_outputs_sss$B[2])),
parse = TRUE
) +
ggplot2::annotate("text",
x = 1,
y = 0.8,
hjust = 0,
vjust = 0.5,
label = sprintf("B['rf'] == %s", irmass::fancy_scientific((1/analysis_outputs_sss$B[2]) /
(1/analysis_outputs_sss$B[1]))),
parse = TRUE
)
)
plt_sas_title <- ''
(plt_sas_sss <-
cowplot::plot_grid(plt_sas,
plt_sss,
nrow = 2,
labels = c('AS','SS'),
align = 'h')
)
readr::write_csv(analysis_inputs_sas,
path = file.path(derivatives_dir,
notebook_name,
paste('analysis_inputs',
notebook_name,
'action_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_names = TRUE)
readr::write_csv(analysis_inputs_sss,
path = file.path(derivatives_dir,
notebook_name,
paste('analysis_inputs',
notebook_name,
'stimulus_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_names = TRUE)
readr::write_csv(analysis_outputs_sas,
path = file.path(derivatives_dir,
notebook_name,
paste('analysis_outputs',
notebook_name,
'action_selective_stopping',
'b01.csv',
sep = '_')
),
col_names = TRUE)
readr::write_csv(analysis_outputs_sss,
path = file.path(derivatives_dir,
notebook_name,
paste('analysis_outputs',
notebook_name,
'stimulus_selective_stopping',
'b01.csv',
sep = '_')
),
col_names = TRUE)
readr::write_csv(plot_inputs_sas,
path = file.path(derivatives_dir,
notebook_name,
paste('plot_inputs',
notebook_name,
'action_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_names = TRUE)
readr::write_csv(plot_inputs_sss,
path = file.path(derivatives_dir,
notebook_name,
paste('plot_inputs',
notebook_name,
'stimulus_selective_stopping',
'rt_data.csv',
sep = '_')
),
col_names = TRUE)
filename_plt_sas <-
paste('plot',
notebook_name,
'action_selective_stopping.pdf',
sep = '_')
ggplot2::ggsave(plot = plt_sas,
path = file.path(figures_dir, notebook_name),
filename = filename_plt_sas,
device = "pdf",
width = 25,
height = 10,
units = 'cm'
)
filename_plt_sss <-
paste('plot',
notebook_name,
'stimulus_selective_stopping.pdf',
sep = '_')
cowplot::ggsave(plot = plt_sss,
path = file.path(figures_dir, notebook_name),
filename = filename_plt_sss,
width = 25,
height = 10,
units = 'cm'
)
filename_plt_sas_sss <-
paste('plot',
notebook_name,
'stimulus_selective_stopping.pdf',
sep = '_')
cowplot::ggsave(plot = plt_sas_sss,
path = file.path(figures_dir, notebook_name),
filename = filename_plt_sas_sss,
width = 25/3,
height = 10,
units = 'cm'
)
bf_output <- tibble::tibble(mdl_class = character(),
mdl = character(),
B = numeric(),
log10_B = numeric(),
error = numeric(),
label = character()
)
for (mdl in rownames(B_full_vs_null@bayesFactor)) {
bf_output <- tibble::add_row(bf_output,
mdl_class = "null_vs_full",
mdl = mdl,
B = 1 / exp(B_full_vs_null[mdl]@bayesFactor$bf),
log10_B = log10(1 / exp(B_full_vs_null[mdl]@bayesFactor$bf)),
error = B_full_vs_null[mdl]@bayesFactor$error,
label = cut(1 / exp(B_full_vs_null[mdl]@bayesFactor$bf),
breaks = get_bf_settings('breaks'),
labels = get_bf_settings('labels')
)
)
}
devtools::load_all(".")
test_effect_ssd_on_srrt_grp <- function(df) {
# Tibble for output
bf_output <- tibble::tibble(mdl_class = character(),
mdl = character(),
B = numeric(),
log10_B = numeric(),
error = numeric(),
label = character()
)
# BayesFactor packages cannot handle tibbles, so convert to data frame
df <-
df %>%
as.data.frame(.)
# Compute Bayes factor for full model
if ('trial_alt' %in% colnames(df)) {
B_full_vs_null <-
BayesFactor::anovaBF(mean_RT ~ t_d_alt*trial_alt + subjectIx,
data = df,
whichRandom = "subjectIx",
rscaleFixed = get_bf_settings('rscale')
)
} else {
B_full_vs_null <-
BayesFactor::anovaBF(mean_RT ~ t_d_alt + subjectIx,
data = df,
whichRandom = "subjectIx",
rscaleFixed = get_bf_settings('rscale')
)
}
# Fill in tibble
for (mdl in rownames(B_full_vs_null@bayesFactor)) {
bf_output <- tibble::add_row(bf_output,
mdl_class = "null_vs_full",
mdl = mdl,
B = 1 / exp(B_full_vs_null[mdl]@bayesFactor$bf),
log10_B = log10(1 / exp(B_full_vs_null[mdl]@bayesFactor$bf)),
error = B_full_vs_null[mdl]@bayesFactor$error,
label = cut(1 / exp(B_full_vs_null[mdl]@bayesFactor$bf),
breaks = get_bf_settings('breaks'),
labels = get_bf_settings('labels')
)
)
}
# Compute Bayes factor for order restricted model
#
# Test order-restricted model: RT_short < RT_intermediate < RT_long
#
# The independent race model predicts that stop-respond response time increases with signal delay.
#
# We do this using a 3-step procedure
# 1. Sample from the posterior distribution and estimate the frequency of correct orderings
# 2. Compute the BayesFactor of order-restricted model against the full model
# 3. Compute the BayesFactor of order-restricted model against the null model (based on transitivity of Bayes Factors)
#
# For background on implementation, see the following paper and blog posts by Richard Morey:
# - Morey, R. D., & Wagenmakers, E.-J. (2014). Simple relation between Bayesian order-restricted and point-null hypothesis tests. Statistics & Probability Letters, 92, 121–124. http://doi.org/10.1016/j.spl.2014.05.010
# - http://bayesfactor.blogspot.nl/2015/01/multiple-comparisons-with-bayesfactor-2.html
# - http://bayesfactor.blogspot.nl/2015/01/multiple-comparisons-with-bayesfactor-1.html
n_iter = get_bf_settings('n_iter')
for (mdl in rownames(B_full_vs_null@bayesFactor)) {
# Only test order restricted model if 't_d_alt' is a factor
if (grepl('t_d_alt',mdl)) {
# Number of possible orderings of t_d
n_orderings = length(combinat::permn(unique(df$t_d_alt)))
# Sample from the posterior distribution and estimate the frequency of correct orderings
samples = BayesFactor::posterior(B_full_vs_null[mdl], iterations = n_iter)
# We expect mean RT on stop-respond trials to increase with t_d.
consistent =
(samples[, "t_d_alt-short"] < samples[, "t_d_alt-intermediate"]) &
(samples[, "t_d_alt-intermediate"] < samples[, "t_d_alt-long"])
# n_consistent = sum(consistent)
# To prevent division by 0
n_consistent = max(c(1,sum(consistent)))
# Compute the BayesFactor of order-restricted model against the full model
B_order_restricted_vs_full = (n_consistent / n_iter) / (1 / n_orderings)
# Compute the BayesFactor of order-restricted model against the null model
B_order_restricted_vs_null = B_order_restricted_vs_full * as.vector(B_full_vs_null[mdl])
# Express as null against order-restricted
B_null_vs_order_restricted = 1 / B_order_restricted_vs_null
# Fill in tibble
for (mdl in rownames(B_full_vs_null@bayesFactor)) {
bf_output <- tibble::add_row(bf_output,
mdl_class = "null_vs_order_restricted",
mdl = mdl,
B = B_null_vs_order_restricted,
log10_B = log10(B_null_vs_order_restricted),
error = NA,
label = cut(B_null_vs_order_restricted,
breaks = get_bf_settings('breaks'),
labels = get_bf_settings('labels')
)
)
}
# Remove variables
rm(list=c('n_orderings',
'samples',
'consistent',
'n_consistent',
'B_order_restricted_vs_full',
'B_order_restricted_vs_null',
'B_null_vs_order_restricted'
)
)
}
}
# # Add Bayes Factor labels
# bf_output$label <- cut(log10(bf_output$B),
#                        breaks = get_bf_settings('breaks'),
#                        labels = get_bf_settings('labels')
#                        )
bf_output
}
